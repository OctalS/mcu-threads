/*
 * mcu-threads: threading library for embedded systems.
 *
 * Copyright (C) 2014 Vladislav Levenetz - octal.s@gmail.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef THREADS_H
#define THREADS_H

#define THREAD_SIZE	@THREAD_SIZE@

typedef unsigned char thread_t[THREAD_SIZE];
typedef thread_t *thread_wait_queue;

extern thread_t *current;

extern void thread_create(thread_t *t, void *fn);
extern void thread_exit(void);
extern void threads_init(void (*fn)(void));
extern void thread_sleep(thread_wait_queue *wq, thread_t *t);
extern void thread_wakeup(thread_wait_queue *wq);
extern void thread_wakeup_now(thread_wait_queue *wq);

/**
 * Defines and initializes a wait queue
 *
 * @name: name of the queue
*/
#define DEFINE_WAIT_QUEUE(name) thread_wait_queue name = (void *)0

/**
 * Dynamically initializes a wait queue
 *
 * @wq: wait queue
*/
static inline void thread_init_waitqueue(thread_wait_queue *wq)
{
	*wq = (void *)0;
}

/**
 * Wait on a condition.
 *
 * @wq: pointer the wait queue
 * @cond: condition to wait on
 *
 * Puts the current thread to sleep until
 * the condition is met.
*/
#define thread_wait(wq, cond) \
	while (!(cond)) { thread_sleep((wq), current); }

#endif /* THREADS_H */
